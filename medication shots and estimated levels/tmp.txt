so im looking to setup a way to have the syncing section to also have a server sync option (off by default) the user can decide to turn it one if they wish. (keep the sync by file stuffs)
currently the website is running in a docker 

i would like some help with making another docker which will handle the backend for this syncing.
only need username and password (say if you need to rest pasword to email rosesite.arise555@passinbox.com your username and what you think your pasword is and what youd like your pasword to now be )

docker inspect RosieSiteMedStuffs
```
rose@rose-server:~$ docker inspect RosieSiteMedStuffs
[
    {
        "Id": "debc8d351f53e605ab752aad2a429b8e433af80e54b82427f617b6f66c1c19b6",
        "Created": "2025-02-04T09:01:56.014350364Z",
        "Path": "/docker-entrypoint.sh",
        "Args": [
            "nginx",
            "-g",
            "daemon off;"
        ],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 83669,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2025-02-04T12:15:54.225813521Z",
            "FinishedAt": "2025-02-04T12:15:47.509892289Z"
        },
        "Image": "sha256:c59e925d63f3aa135bfa9d82cb03fba9ee30edb22ebe6c9d4f43824312ba3d9b",
        "ResolvConfPath": "/var/lib/docker/containers/debc8d351f53e605ab752aad2a429b8e433af80e54b82427f617b6f66c1c19b6/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/debc8d351f53e605ab752aad2a429b8e433af80e54b82427f617b6f66c1c19b6/hostname",
        "HostsPath": "/var/lib/docker/containers/debc8d351f53e605ab752aad2a429b8e433af80e54b82427f617b6f66c1c19b6/hosts",
        "LogPath": "/var/lib/docker/containers/debc8d351f53e605ab752aad2a429b8e433af80e54b82427f617b6f66c1c19b6/debc8d351f53e605ab752aad2a429b8e433af80e54b82427f617b6f66c1c19b6-json.log",
        "Name": "/RosieSiteMedStuffs",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "docker-default",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": [
                "/home/rose/webSites/RosieSiteMedStuffs:/usr/share/nginx/html"
            ],
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "bridge",
            "PortBindings": {
                "80/tcp": [
                    {
                        "HostIp": "",
                        "HostPort": "8080"
                    }
                ]
            },
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "ConsoleSize": [
                0,
                0
            ],
            "CapAdd": [
                "AUDIT_WRITE",
                "CHOWN",
                "DAC_OVERRIDE",
                "FOWNER",
                "FSETID",
                "KILL",
                "MKNOD",
                "NET_BIND_SERVICE",
                "NET_RAW",
                "SETFCAP",
                "SETGID",
                "SETPCAP",
                "SETUID",
                "SYS_CHROOT"
            ],
            "CapDrop": [
                "AUDIT_CONTROL",
                "BLOCK_SUSPEND",
                "DAC_READ_SEARCH",
                "IPC_LOCK",
                "IPC_OWNER",
                "LEASE",
                "LINUX_IMMUTABLE",
                "MAC_ADMIN",
                "MAC_OVERRIDE",
                "NET_ADMIN",
                "NET_BROADCAST",
                "SYSLOG",
                "SYS_ADMIN",
                "SYS_BOOT",
                "SYS_MODULE",
                "SYS_NICE",
                "SYS_PACCT",
                "SYS_PTRACE",
                "SYS_RAWIO",
                "SYS_RESOURCE",
                "SYS_TIME",
                "SYS_TTY_CONFIG",
                "WAKE_ALARM"
            ],
            "CgroupnsMode": "private",
            "Dns": [],
            "DnsOptions": null,
            "DnsSearch": null,
            "ExtraHosts": [],
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": null,
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": [],
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": null,
            "PidsLimit": null,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware",
                "/sys/devices/virtual/powercap"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ],
            "Init": false
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/28a276246240d4082a09f7aaafe744cc612fdc05932f0dd7fc876df80368c965-init/diff:/var/lib/docker/overlay2/f9dcdfb6088e7190800a292cdbc270c6a3e389bfc8fb64afc86d4bac069d2b06/diff:/var/lib/docker/overlay2/92b5576f5068d62962a7db7a8fab3d885cb51243e0b9aa6f242a0d4b56574d98/diff:/var/lib/docker/overlay2/2bbaf77ec196eb957f2e171883a1bd5029c69198315f769beddf462dc0babc84/diff:/var/lib/docker/overlay2/a6622378a6e4484b298d31f9877aa25c060612c5b5935bf6e7e23471005f2c65/diff:/var/lib/docker/overlay2/80e86bd896c96fb34793443b2ec0325fa5bdc357b10c8471e3942661210c3eb8/diff:/var/lib/docker/overlay2/36eb94cc27617d005ad59afa0b49d309ca286d8c3f2718c7b22e7ee78ff7403e/diff:/var/lib/docker/overlay2/7915a59911e3f644d6033a581698c0a611028181b8a44cc3df7a6b30b7edd2d9/diff",
                "MergedDir": "/var/lib/docker/overlay2/28a276246240d4082a09f7aaafe744cc612fdc05932f0dd7fc876df80368c965/merged",
                "UpperDir": "/var/lib/docker/overlay2/28a276246240d4082a09f7aaafe744cc612fdc05932f0dd7fc876df80368c965/diff",
                "WorkDir": "/var/lib/docker/overlay2/28a276246240d4082a09f7aaafe744cc612fdc05932f0dd7fc876df80368c965/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [
            {
                "Type": "bind",
                "Source": "/home/rose/webSites/RosieSiteMedStuffs",
                "Destination": "/usr/share/nginx/html",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }
        ],
        "Config": {
            "Hostname": "66a87b5a6c01",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "80/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NGINX_VERSION=1.27.3",
                "NJS_VERSION=0.8.7",
                "NJS_RELEASE=1~bookworm",
                "PKG_RELEASE=1~bookworm",
                "DYNPKG_RELEASE=1~bookworm"
            ],
            "Cmd": [
                "nginx",
                "-g",
                "daemon off;"
            ],
            "Image": "nginx:latest",
            "Volumes": {
                "/usr/share/nginx/html": {}
            },
            "WorkingDir": "",
            "Entrypoint": [
                "/docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "maintainer": "NGINX Docker Maintainers <docker-maint@nginx.com>"
            },
            "StopSignal": "SIGQUIT"
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "1dcdbd5dfbb6aa991823d284fa8a1ac699ea78e68bac9f0a085d5ec461b31509",
            "SandboxKey": "/var/run/docker/netns/1dcdbd5dfbb6",
            "Ports": {
                "80/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "8080"
                    },
                    {
                        "HostIp": "::",
                        "HostPort": "8080"
                    }
                ]
            },
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "fde206c5282f0e4e938a4374e7b5eaae3ff2e9930d0fa1547524905d4f172c96",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:02",
            "Networks": {
                "bridge": {
                    "IPAMConfig": {},
                    "Links": null,
                    "Aliases": null,
                    "MacAddress": "02:42:ac:11:00:02",
                    "NetworkID": "48182c8968a5a5ccce368f8c111c282b18e8bb144ce6482a7e57586305c29b8c",
                    "EndpointID": "fde206c5282f0e4e938a4374e7b5eaae3ff2e9930d0fa1547524905d4f172c96",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "DriverOpts": null,
                    "DNSNames": null
                }
            }
        }
    }
]
```

meds.html
```
<!DOCTYPE html>
<html>
<head>
    <link rel="icon" type="image/png" sizes="32x32" href="images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="images/favicon-16x16.png">
  <title>Medication Tracker</title>
  <link rel="stylesheet" href="meds.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
</head>
<body>
  <!-- Unified Top Navigation Bar -->
  <header class="top-bar">
    <nav class="nav-container">
      <ul class="nav-links">
        <li><a href="home.html">Home</a></li>
        <li><a href="meds.html">Meds</a></li>
        <li><a href="#"><!--WIP--></a></li>
        <li><a href="#"><!--WIP--></a></li>
      </ul>
      <div class="user-account">
        <button id="Syncing">Syncing</button>
        <button id="settingsButton">Settings</button>
      </div>
    </nav>
  </header>

  <div class="container">
    <!-- Removed the separate header with user-account here -->
    <div class="controls">
      <div class="input-group">
        <label for="medication">Medication:</label>
        <select id="medication">
          <option value="mounjaro">Mounjaro</option>
          <!-- template 
          <option value="med">med</option> -->
        </select>
      </div>

      <div class="input-group">
        <label for="dose">Dose:</label>
        <select id="dose">
          <option value="2.5">2.5mg</option>
          <option value="5">5mg</option>
          <option value="7.5">7.5mg</option>
          <option value="10">10mg</option>
          <option value="12.5">12.5mg</option>
          <option value="15">15mg</option>
        </select>
      </div>

      <div class="input-group">
        <label for="date">Date:</label>
        <input type="text" id="date" placeholder="DD/MM/YYYY">
      </div>

      <div class="input-group">
        <label for="time">Time:</label>
        <input type="text" id="time" placeholder="Select Time">
      </div>

      <button id="saveShot">Save Shot</button>
      <button id="shotHistory">Shot History</button>
    </div>

    <div class="graph-controls">
      <label for="graphViewSelect">Graph View:</label>
      <select id="graphViewSelect">
        <option value="week">Week</option>
        <option value="month" selected>Month</option>
        <option value="90days">90 Days</option>
        <option value="alltime">All Time</option>
      </select>
    </div>

    <div id="mostRecentShot" class="box-container">
      <div class="box-left">
        <p>Most Recent Shot:</p>
        <p id="lastShotDate"></p>
        <p id="lastShotTime"></p>
        <p id="lastShotMedication"></p>
        <p id="lastShotDose"></p>
      </div>
      <div class="box-center">
        <p>Current Estimated Medication Level:</p>
        <p id="currentMedicationLevel"></p>
      </div>
      <div class="box-right">
        <p>Estimated Next Shot:</p>
        <p id="nextShotDate"></p>
        <p id="nextShotTime"></p>
        <p id="nextShotMedication"></p>
        <p id="nextShotDose"></p>
      </div>
    </div>

    <div class="graph-container">
      <canvas id="medicationChart"></canvas>
    </div>

    <div id="shotHistoryModal" class="modal">
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="meds.js"></script>
<!-- Settings Modal -->
<div id="settingsModal" class="modal">
  <div class="modal-content">
    <h2>Display Settings</h2>
    <div class="input-group">
      <label>Time Format:</label>
      <select id="timeFormat">
        <option value="12hr">12-hour</option>
        <option value="24hr">24-hour</option>
      </select>
    </div>
    <div class="input-group">
      <label>Date Format:</label>
      <select id="dateFormat">
        <option value="dd/mm/yyyy">DD/MM/YYYY</option>
        <option value="mm/dd/yyyy">MM/DD/YYYY</option>
        <option value="yyyy/mm/dd">YYYY/MM/DD</option>
      </select>
    </div>
    <div class="input-group">
      <label>Week Start:</label>
      <select id="weekStart">
        <option value="Sunday">Sunday</option>
        <option value="Monday">Monday</option>
        <option value="Tuesday">Tuesday</option>
        <option value="Wednesday">Wednesday</option>
        <option value="Thursday">Thursday</option>
        <option value="Friday">Friday</option>
        <option value="Saturday">Saturday</option>
      </select>
    </div>
    <button id="saveSettings">Save Settings</button>
    <button class="close-modal">Close</button>
  </div>
</div>
<!-- Sync Modal -->
<div id="syncModal" class="modal">
  <div class="modal-content">
    <h2>Sync Data</h2>
    <div class="input-group">
      <button id="exportData" class="btn-sync">Export All Data</button>
    </div>
    <div class="input-group">
      <label for="importData">Import Data:</label>
      <input type="file" id="importData" accept=".json">
    </div>
    <div id="syncStatus"></div>
    <button class="close-modal">Close</button>
  </div>
</div>
</body>
</html>
```

meds.css
```
/* Reset some default styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  background-color: #121212;
  color: #eee;
  line-height: 1.6;
}

/* Top Navigation Bar */
.top-bar {
  background-color: #1a1a1a;
  padding: 10px 20px;
}

.nav-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-links {
  list-style: none;
  display: flex;
  gap: 20px;
}

.nav-links li a {
  text-decoration: none;
  color: #eee;
  font-weight: bold;
}

.nav-links li a:hover {
  color: #4bc0c0;
}

.user-account {
  display: flex;
  gap: 10px;
}

.user-account button {
  padding: 8px 16px;
  background-color: #333;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

/* Existing styles */

body {
  font-family: sans-serif;
  background-color: #121212;
  color: #eee;
  margin: 0;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
}

/* Remove the separate .header div styling since it is now merged in top-bar */
/* .header {
  display: flex;
  justify-content: flex-end;
  margin-bottom: 20px;
} */

.controls {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-bottom: 20px;
}

.input-group {
  display: flex;
  flex-direction: column;
}

.input-group label {
  margin-bottom: 5px;
  color: #ccc;
}

select, input {
  padding: 8px;
  background-color: #333;
  color: white;
  border: 1px solid #555;
  border-radius: 4px;
}

button {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.graph-container {
  width: 100%;
  height: 500px;
  margin-top: 20px;
  background-color: #1a1a1a;
  border-radius: 8px;
  padding: 15px;
}

#medicationChart {
  width: 100%!important;
  height: 100%!important;
}

.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.7);
}

.modal-content {
  background-color: #222;
  margin: 5% auto;
  padding: 20px;
  width: 80%;
  max-width: 800px;
  border-radius: 8px;
}

.box-container {
  display: flex;
  justify-content: space-between;
  background-color: #1a1a1a;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.box-left, .box-center, .box-right {
  flex: 1;
  padding: 10px;
  text-align: center;
}

/* Modal styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.8);
}

.modal-content {
  background-color: #1a1a1a;
  margin: 2% auto;
  padding: 20px;
  width: 90%;
  max-width: 800px;
  border-radius: 8px;
}

.btn-danger {
  background-color: #dc3545 !important;
}

#shotHistoryTable {
  width: 100%;
  margin-top: 15px;
}

#shotHistoryTable th {
  background-color: #333;
  padding: 12px;
  text-align: left;
}

#shotHistoryTable td {
  padding: 10px;
  border-bottom: 1px solid #333;
}

/* Add to modal styles */
.modal-content .input-group {
  margin: 15px 0;
}

#settingsButton {
  margin-right: auto;
}

/* Sync Button Styles */
.btn-sync {
  background-color: #28a745 !important;
}

#syncStatus {
  margin-top: 15px;
  padding: 10px;
  border-radius: 4px;
}

#syncStatus.success {
  background-color: #28a74533;
  border: 1px solid #28a745;
}

#syncStatus.error {
  background-color: #dc354533;
  border: 1px solid #dc3545;
}
```

meds.js
```
/*************************************
 * Global Settings & Helper Functions
 *************************************/

// Load default settings from localStorage or use defaults
let userSettings = {
  dateFormat: localStorage.getItem("dateFormat") || "dd/mm/yyyy",
  timeFormat: localStorage.getItem("timeFormat") || "12hr",
  weekStart: localStorage.getItem("weekStart") || "Sunday" // New setting for week start day
};

// Mapping objects to convert user setting formats into flatpickr tokens
const flatpickrDateFormatMapping = {
  "dd/mm/yyyy": "d/m/Y",
  "mm/dd/yyyy": "m/d/Y",
  "yyyy/mm/dd": "Y/m/d"
};

const flatpickrTimeFormatMapping = {
  "12hr": "h:i K",
  "24hr": "H:i"
};

// Helper function to format Date objects based on userSettings.dateFormat
function formatDate(date) {
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  switch (userSettings.dateFormat) {
    case "mm/dd/yyyy":
      return `${month}/${day}/${year}`;
    case "yyyy/mm/dd":
      return `${year}/${month}/${day}`;
    case "dd/mm/yyyy":
    default:
      return `${day}/${month}/${year}`;
  }
}

// Helper function to format graph labels (for month and 90days views)
// Pads both day and month to two digits and outputs in order per the user's setting.
// For "dd/mm/yyyy", returns "dd/mm"; for "mm/dd/yyyy" or "yyyy/mm/dd", returns "mm/dd".
function formatGraphLabel(date) {
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  if (userSettings.dateFormat === "dd/mm/yyyy") {
    return `${day}/${month}`;
  } else {
    return `${month}/${day}`;
  }
}

// Helper function to format Date objects based on userSettings.timeFormat
function formatTime(date) {
  return date.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: userSettings.timeFormat === "12hr"
  });
}

// Function to update flatpickr formats if settings change
function updateFlatpickrFormats() {
  datePicker.set("dateFormat", flatpickrDateFormatMapping[userSettings.dateFormat]);
  timePicker.set("dateFormat", flatpickrTimeFormatMapping[userSettings.timeFormat]);
}

/***********************
 * Data & DOM Elements
 ***********************/

const medicationData = {
  mounjaro: {halfLife: 120, timeToPeak: 48},
  // template
  // med: {halfLife: num, timeToPeak: num},
};

const elements = {
  medicationSelect: document.getElementById("medication"),
  doseSelect: document.getElementById("dose"),
  dateInput: document.getElementById("date"),
  timeInput: document.getElementById("time"),
  saveShotButton: document.getElementById("saveShot"),
  chartCanvas: document.getElementById("medicationChart"),
  graphViewSelect: document.getElementById("graphViewSelect"),
  shotHistoryButton: document.getElementById("shotHistory"),
  modal: document.getElementById("shotHistoryModal")
};

// Retrieve shot history from localStorage
let shotHistory = JSON.parse(localStorage.getItem("shotHistory") || "[]");

/************************************
 * Flatpickr Initialization (Main)
 ************************************/

const datePicker = flatpickr(elements.dateInput, {
  dateFormat: flatpickrDateFormatMapping[userSettings.dateFormat],
  defaultDate: "today"
});

const timePicker = flatpickr(elements.timeInput, {
  enableTime: true,
  noCalendar: true,
  dateFormat: flatpickrTimeFormatMapping[userSettings.timeFormat],
  defaultDate: new Date().toLocaleTimeString([], {
    hour: "2-digit",
    minute: "2-digit",
    hour12: userSettings.timeFormat === "12hr"
  })
});

/*********************
 * Chart Initialization
 *********************/
let medicationChart;

function createChart(data) {
  // If no data exists, set a default placeholder dataset
  if (!data.labels.length) {
    data.labels = ["No Data"];
    data.values = [0];
    data.timestamps = [new Date()];
  }
  
  if (medicationChart) medicationChart.destroy();

  medicationChart = new Chart(elements.chartCanvas, {
    type: "line",
    data: {
      labels: data.labels,
      // Attach the timestamps array to the chart config for tooltip callbacks
      datasets: [{
        label: "Medication Level",
        data: data.values,
        borderColor: "#4bc0c0",
        tension: 0.4
      }],
      timestamps: data.timestamps
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        tooltip: {
          callbacks: {
            // Use the timestamps array to create a custom title for the tooltip
            title: function(context) {
              const index = context[0].dataIndex;
              const ts = medicationChart.data.timestamps[index];
              return `${formatDate(ts)} ${formatTime(ts)}`;
            },
            label: function(context) {
              let value = context.parsed.y;
              return `Level: ${value.toFixed(2)}mg`;
            }
          }
        }
      },
      scales: {
        x: {
          ticks: {
            callback: (value, index) => {
              const view = elements.graphViewSelect.value;
              const totalDays = Math.ceil(data.labels.length / 24);
              switch (view) {
                case "week":
                  return index % 24 === 0 ? data.labels[index] : "";
                case "month":
                case "90days":
                  return index % (5 * 24) === 0 ? data.labels[index] : "";
                case "alltime":
                  if (totalDays <= 30) return index % 24 === 0 ? data.labels[index] : "";
                  if (totalDays <= 180) return index % (7 * 24) === 0 ? data.labels[index] : "";
                  return index % (30 * 24) === 0 ? data.labels[index] : "";
                default:
                  return data.labels[index];
              }
            },
            autoSkip: false,
            maxRotation: 0
          }
        },
        y: {
          beginAtZero: true,
          ticks: {
            callback: value => `${value.toFixed(2)}mg`
          }
        }
      }
    }
  });
}

/*****************************
 * Medication Level Calculation
 *****************************/
function calculateMedicationLevels(shotHistory, graphView) {
  // If no shots, return empty arrays
  if (shotHistory.length === 0) return { labels: [], values: [], timestamps: [] };

  const now = new Date();
  let startDate, endDate;

  switch (graphView) {
    case "week": {
      // For week view, calculate startDate based on userSettings.weekStart
      const weekDays = {
        "Sunday": 0,
        "Monday": 1,
        "Tuesday": 2,
        "Wednesday": 3,
        "Thursday": 4,
        "Friday": 5,
        "Saturday": 6
      };
      const desiredStart = weekDays[userSettings.weekStart];
      startDate = new Date(now);
      // Adjust startDate backward to the most recent desiredStart day
      let currentDay = startDate.getDay();
      let diff = (currentDay - desiredStart + 7) % 7;
      startDate.setDate(startDate.getDate() - diff);
      startDate.setHours(0, 0, 0, 0);
      // End date is 6 days later, set to end of day
      endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 6);
      endDate.setHours(23, 59, 59, 999);
      break;
    }
    case "month":
      startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      break;
    case "90days":
      startDate = new Date(now);
      startDate.setDate(now.getDate() - 30);
      endDate = new Date(now);
      endDate.setDate(now.getDate() + 60);
      break;
    case "alltime": {
      startDate = new Date(shotHistory[shotHistory.length - 1].dateTime);
      const lastShot = shotHistory[0];
      const { halfLife } = medicationData[lastShot.medication];
      let hours = 0;
      let concentration = parseFloat(lastShot.dose);
      while (concentration > 0.01) {
        hours++;
        concentration = parseFloat(lastShot.dose) * Math.pow(0.5, hours / halfLife);
      }
      endDate = new Date(new Date(lastShot.dateTime).getTime() + hours * 3600000);
      break;
    }
  }

  const totalHours = Math.ceil((endDate - startDate) / 3600000);
  const labels = [];
  const timestamps = [];
  const concentrationData = new Array(totalHours + 1).fill(0);

  // Generate labels and timestamps for each hourly increment
  for (let hour = 0; hour <= totalHours; hour++) {
    const currentDate = new Date(startDate.getTime() + hour * 3600000);
    timestamps.push(currentDate);
    switch (graphView) {
      case "week":
        // For week view, display full weekday names at the start of each day
        labels.push(hour % 24 === 0 ? currentDate.toLocaleDateString("en-US", { weekday: "long" }) : "");
        break;
      case "month":
      case "90days":
        // For month and 90days, use our formatGraphLabel helper to display padded day/month per user setting
        labels.push(hour % 24 === 0 ? formatGraphLabel(currentDate) : "");
        break;
      case "alltime":
        // For alltime view, display the full date (including year) in the user's format
        labels.push(hour % 24 === 0 ? formatDate(currentDate) : "");
        break;
    }
  }

  // Calculate medication concentration for each shot over time
  for (const shot of shotHistory) {
    const { medication, dose, dateTime } = shot;
    const { halfLife, timeToPeak } = medicationData[medication];
    const shotTime = new Date(dateTime).getTime();

    for (let hour = 0; hour <= totalHours; hour++) {
      const currentTime = startDate.getTime() + hour * 3600000;
      const hoursSinceDose = (currentTime - shotTime) / 3600000;
      if (hoursSinceDose >= 0) {
        let concentration = 0;
        if (hoursSinceDose <= timeToPeak) {
          concentration = (hoursSinceDose / timeToPeak) * dose;
        } else {
          concentration = dose * Math.pow(0.5, (hoursSinceDose - timeToPeak) / halfLife);
        }
        concentrationData[hour] += concentration;
      }
    }
  }

  return { labels, values: concentrationData, timestamps };
}

/*******************************
 * Calculate Current Medication Level
 *******************************/
// New function that calculates the medication level at the current time
function calculateCurrentMedicationLevel(shotHistory) {
  const now = new Date();
  let level = 0;
  for (const shot of shotHistory) {
    const shotTime = new Date(shot.dateTime);
    const hoursSinceDose = (now - shotTime) / 3600000;
    if (hoursSinceDose < 0) continue; // future shots are ignored
    const dose = parseFloat(shot.dose);
    const med = medicationData[shot.medication];
    if (!med) continue;
    if (hoursSinceDose <= med.timeToPeak) {
      level += (hoursSinceDose / med.timeToPeak) * dose;
    } else {
      level += dose * Math.pow(0.5, (hoursSinceDose - med.timeToPeak) / med.halfLife);
    }
  }
  return level;
}

/*******************************
 * Update & Display Functions
 *******************************/

// Update most recent shot details and next shot estimation
function updateMostRecentShotDisplay() {
  const lastShotDate = document.getElementById("lastShotDate");
  const lastShotTime = document.getElementById("lastShotTime");
  const lastShotMedication = document.getElementById("lastShotMedication");
  const lastShotDose = document.getElementById("lastShotDose");
  const currentMedicationLevel = document.getElementById("currentMedicationLevel");
  const nextShotDate = document.getElementById("nextShotDate");
  const nextShotTime = document.getElementById("nextShotTime");
  const nextShotMedication = document.getElementById("nextShotMedication");
  const nextShotDose = document.getElementById("nextShotDose");

  // Sort shots by date (newest first)
  const sortedShots = [...shotHistory].sort((a, b) => new Date(b.dateTime) - new Date(a.dateTime));

  if (sortedShots.length > 0) {
    const mostRecent = sortedShots[0];
    const shotDate = new Date(mostRecent.dateTime);

    lastShotDate.textContent = formatDate(shotDate);
    lastShotTime.textContent = formatTime(shotDate);
    lastShotMedication.textContent = mostRecent.medication;
    lastShotDose.textContent = `${mostRecent.dose}mg`;

    // Calculate current medication level based on the user's current time and shot history
    const currentLevel = calculateCurrentMedicationLevel(shotHistory);
    currentMedicationLevel.textContent = `${mostRecent.medication}: ${currentLevel.toFixed(3)}mg`;

    // Estimated next shot: 7 days after the most recent shot
    const nextShot = new Date(shotDate);
    nextShot.setDate(shotDate.getDate() + 7);
    nextShotDate.textContent = formatDate(nextShot);
    nextShotTime.textContent = formatTime(nextShot);
    nextShotMedication.textContent = mostRecent.medication;
    nextShotDose.textContent = `${mostRecent.dose}mg`;
  } else {
    lastShotDate.textContent = "N/A";
    lastShotTime.textContent = "N/A";
    lastShotMedication.textContent = "N/A";
    lastShotDose.textContent = "N/A";
    currentMedicationLevel.textContent = "0mg";
    nextShotDate.textContent = "N/A";
    nextShotTime.textContent = "N/A";
    nextShotMedication.textContent = "N/A";
    nextShotDose.textContent = "N/A";
  }
}

// Get the last dose used for a given medication from shotHistory
function getLastDoseForMedication(medication) {
  const medicationShots = shotHistory
    .filter(shot => shot.medication === medication)
    .sort((a, b) => new Date(b.dateTime) - new Date(a.dateTime));
  return medicationShots[0]?.dose || null;
}

// Update the dose selection based on the last used dose for the selected medication
function updateDoseToLastUsed() {
  const selectedMedication = elements.medicationSelect.value;
  const lastDose = getLastDoseForMedication(selectedMedication);
  if (lastDose) {
    elements.doseSelect.value = lastDose;
  }
}

// Update display: refresh chart and shot details
function updateDisplay() {
  const data = calculateMedicationLevels(shotHistory, elements.graphViewSelect.value);
  createChart(data);
  updateMostRecentShotDisplay();
}

/*******************************
 * Event Handlers & Listeners
 *******************************/

// Save shot event handler
elements.saveShotButton.addEventListener("click", () => {
  const shotDate = datePicker.selectedDates[0];
  const shotTime = timePicker.selectedDates[0];
  const combinedDateTime = new Date(
    shotDate.getFullYear(),
    shotDate.getMonth(),
    shotDate.getDate(),
    shotTime.getHours(),
    shotTime.getMinutes()
  );

  const shotData = {
    dateTime: combinedDateTime.toISOString(),
    medication: elements.medicationSelect.value,
    dose: elements.doseSelect.value
  };

  shotHistory.unshift(shotData);
  localStorage.setItem("shotHistory", JSON.stringify(shotHistory));
  updateDisplay();

  setTimeout(updateDoseToLastUsed, 50);
});

// Update dose selection when medication changes
elements.medicationSelect.addEventListener("change", updateDoseToLastUsed);

// Change graph view handler
elements.graphViewSelect.addEventListener("change", updateDisplay);

// Render Shot History Modal
function renderShotHistory() {
  let modalContent = `
    <div class="modal-content">
      <h2>Shot History</h2>
      <table id="shotHistoryTable">
        <thead>
          <tr>
            <th>Date/Time</th>
            <th>Medication</th>
            <th>Dose</th>
            <th>Edit</th>
          </tr>
        </thead>
        <tbody>
          ${shotHistory.map((shot, index) => {
            const shotDate = new Date(shot.dateTime);
            const formattedDate = formatDate(shotDate);
            const formattedTime = formatTime(shotDate);
            return `<tr>
                      <td>${formattedDate} ${formattedTime}</td>
                      <td>${shot.medication}</td>
                      <td>${shot.dose}mg</td>
                      <td><button class="editShotButton" data-index="${index}">Edit</button></td>
                    </tr>`;
          }).join('')}
        </tbody>
      </table>
      <button id="closeModal">Close</button>
    </div>
  `;
  elements.modal.innerHTML = modalContent;
  elements.modal.style.display = "block";

  document.getElementById("closeModal").addEventListener("click", () => {
    elements.modal.style.display = "none";
  });

  document.querySelectorAll(".editShotButton").forEach(button => {
    button.addEventListener("click", (e) => {
      const index = e.target.getAttribute("data-index");
      editShot(index);
    });
  });
}

// Edit shot function to modify or delete a shot
function editShot(index) {
  const shot = shotHistory[index];
  const shotDate = new Date(shot.dateTime);
  const formattedDate = formatDate(shotDate);
  const formattedTime = formatTime(shotDate);
  
  const editContent = `
    <div class="modal-content">
      <h2>Edit Shot</h2>
      <label for="editMedication">Medication:</label>
      <select id="editMedication">
        <option value="mounjaro" ${shot.medication === "mounjaro" ? "selected" : ""}>Mounjaro</option>
      </select>
      <label for="editDose">Dose:</label>
      <select id="editDose">
        <option value="2.5" ${shot.dose === "2.5" ? "selected" : ""}>2.5mg</option>
        <option value="5" ${shot.dose === "5" ? "selected" : ""}>5mg</option>
        <option value="7.5" ${shot.dose === "7.5" ? "selected" : ""}>7.5mg</option>
        <option value="10" ${shot.dose === "10" ? "selected" : ""}>10mg</option>
        <option value="12.5" ${shot.dose === "12.5" ? "selected" : ""}>12.5mg</option>
        <option value="15" ${shot.dose === "15" ? "selected" : ""}>15mg</option>
      </select>
      <label for="editDate">Date:</label>
      <input type="text" id="editDate" value="${formattedDate}">
      <label for="editTime">Time:</label>
      <input type="text" id="editTime" value="${formattedTime}">
      <button id="saveEdit">Save Changes</button>
      <button id="deleteShot" class="btn-danger">Delete Shot</button>
      <button id="cancelEdit">Cancel</button>
    </div>
  `;
  
  elements.modal.innerHTML = editContent;
  elements.modal.style.display = "block";

  flatpickr(document.getElementById("editDate"), {
    dateFormat: flatpickrDateFormatMapping[userSettings.dateFormat],
    defaultDate: formattedDate
  });
  flatpickr(document.getElementById("editTime"), {
    enableTime: true,
    noCalendar: true,
    dateFormat: flatpickrTimeFormatMapping[userSettings.timeFormat],
    defaultDate: shotDate
  });

  document.getElementById("saveEdit").addEventListener("click", () => {
    const newMedication = document.getElementById("editMedication").value;
    const newDose = document.getElementById("editDose").value;
    const newDate = document.getElementById("editDate").value;
    const newTime = document.getElementById("editTime").value;
    
    let day, month, year;
    if (userSettings.dateFormat === "mm/dd/yyyy") {
      [month, day, year] = newDate.split("/");
    } else if (userSettings.dateFormat === "yyyy/mm/dd") {
      [year, month, day] = newDate.split("/");
    } else {
      [day, month, year] = newDate.split("/");
    }
    const dateTime = new Date(`${year}-${month}-${day} ${newTime}`);
    
    shotHistory[index] = {
      dateTime: dateTime.toISOString(),
      medication: newMedication,
      dose: newDose
    };
    localStorage.setItem("shotHistory", JSON.stringify(shotHistory));
    updateDisplay();
    renderShotHistory();
  });

  document.getElementById("deleteShot").addEventListener("click", () => {
    if (confirm("Are you sure you want to delete this shot?")) {
      shotHistory.splice(index, 1);
      localStorage.setItem("shotHistory", JSON.stringify(shotHistory));
      updateDisplay();
      renderShotHistory();
    }
  });

  document.getElementById("cancelEdit").addEventListener("click", () => {
    renderShotHistory();
  });
}

// Shot History button event listener
elements.shotHistoryButton.addEventListener("click", () => {
  renderShotHistory();
});

/**********************
 * Initialization
 **********************/
document.addEventListener("DOMContentLoaded", () => {
  elements.modal.style.display = "none"; // Ensure shot history modal is hidden
  updateDisplay();
  updateMostRecentShotDisplay();
  updateDoseToLastUsed();

  // Settings modal: open on settings button click
  document.getElementById("settingsButton").addEventListener("click", () => {
    const settingsModal = document.getElementById("settingsModal");
    settingsModal.style.display = "block";

    // Pre-select current settings
    document.getElementById("timeFormat").value = userSettings.timeFormat;
    document.getElementById("dateFormat").value = userSettings.dateFormat;
    document.getElementById("weekStart").value = userSettings.weekStart;
  });

  // Settings modal: close when clicking the close button
  document.querySelector("#settingsModal .close-modal").addEventListener("click", () => {
    document.getElementById("settingsModal").style.display = "none";
  });

  // **SYNC MODAL - OPEN**
  document.getElementById("Syncing").addEventListener("click", () => {
    document.getElementById("syncModal").style.display = "block"; // Open sync modal
  });

  // **SYNC MODAL - CLOSE**
  document.querySelector("#syncModal .close-modal").addEventListener("click", () => {
    document.getElementById("syncModal").style.display = "none"; // Close sync modal
  });

  // **SYNC MODAL - EXPORT DATA**
  document.getElementById("exportData").addEventListener("click", () => {
    const exportData = {
      shotHistory: JSON.parse(localStorage.getItem("shotHistory") || "[]"),
      settings: {
        dateFormat: localStorage.getItem("dateFormat"),
        timeFormat: localStorage.getItem("timeFormat"),
        weekStart: localStorage.getItem("weekStart")
      }
    };

    const blob = new Blob([JSON.stringify(exportData)], {type: "application/json"});
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `med-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });

  // **SYNC MODAL - IMPORT DATA**
  document.getElementById("importData").addEventListener("change", function(e) {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const importedData = JSON.parse(event.target.result);

        // Validate structure
        if (!importedData.shotHistory || !importedData.settings) {
          throw new Error("Invalid data format");
        }

        // Save data to localStorage
        localStorage.setItem("shotHistory", JSON.stringify(importedData.shotHistory));
        localStorage.setItem("dateFormat", importedData.settings.dateFormat);
        localStorage.setItem("timeFormat", importedData.settings.timeFormat);
        localStorage.setItem("weekStart", importedData.settings.weekStart);

        // Update UI
        shotHistory = importedData.shotHistory;
        userSettings = importedData.settings;
        updateFlatpickrFormats();
        updateDisplay();

        showSyncStatus("Data imported successfully!", "success");
        setTimeout(() => window.location.reload(), 1000); // Reload page after successful import
      } catch (error) {
        showSyncStatus(`Import failed: ${error.message}`, "error");
      }
    };
    reader.readAsText(file);
  });
});

function showSyncStatus(message, type) {
  const statusDiv = document.getElementById("syncStatus");
  statusDiv.textContent = message;
  statusDiv.className = type;
  setTimeout(() => {
    statusDiv.textContent = "";
    statusDiv.className = "";
  }, 5000);
}
```